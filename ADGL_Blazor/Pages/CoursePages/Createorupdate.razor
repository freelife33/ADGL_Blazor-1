@page "/createorupdate"
@page "/edit/{Id:int}"
@using ADGL_Blazor.Business.Contracts
@using ADGL_Blazor.Service

@inject ICourseRepository _courseRepository
@inject NavigationManager _navigationManager
@inject IJSRuntime _jsRuntime;
@inject IFileUpload _fileUpload



<h3>Createorupdate</h3>

<h4>Kurs Ekle</h4>
<div class="col-md-12">
    <div class="card">
        <div class="card-body">
            <div>
                <EditForm Model="courseModel" OnValidSubmit="CourseCreateOrUpdate">
                    <DataAnnotationsValidator></DataAnnotationsValidator>
                    <div class="form-group">
                        <label>Kurs Adı</label>
                        <InputText @bind-Value="courseModel.Name" class="form-control"> </InputText>
                        <ValidationMessage For="()=>courseModel.Name"></ValidationMessage>
                    </div>
                    <div class="form-group">
                        <label>Kurs Fiyatı</label>
                        <InputNumber @bind-Value="courseModel.CoursePrice" class="form-control"> </InputNumber>
                        <ValidationMessage For="()=>courseModel.CoursePrice"></ValidationMessage>
                    </div>
                    <div class="form-group">
                        <label>Kurs Açıklaması</label>
                        <InputTextArea @bind-Value="courseModel.Description" class="form-control"> </InputTextArea>
                        <ValidationMessage For="()=>courseModel.Description"></ValidationMessage>
                    </div>
                    <div class="form-group">
                        <label>Kurs Başlığı</label>
                        <InputText @bind-Value="courseModel.Title" class="form-control"> </InputText>
                        <ValidationMessage For="()=>courseModel.Title"></ValidationMessage>
                    </div>
                    <div class="form-group">
                        <label>Kurs Alt Başlığı</label>
                        <InputText @bind-Value="courseModel.SubTitle" class="form-control"> </InputText>
                        <ValidationMessage For="()=>courseModel.SubTitle"></ValidationMessage>
                    </div>
                    @if (Id > 0)
                    {
                    <div class="form-group">
                        <label>Kurs Resmi</label>
                        <InputFile OnChange="AddPicture"></InputFile>
                       
                    </div>
                        
                    }
                    <div class="form-group">
                        <button class="btn btn-success"> Kurs Ekle</button>
                        <NavLink href="courselist" class="btn btn-danger">Listeye Geri Dön</NavLink>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>

</div>

@code {
    [Parameter]
    public int? Id { get; set; }

    private CourseDto courseModel { get; set; } = new CourseDto();

    protected override async Task OnInitializedAsync()
    {
        if (Id != null)
        {
            //Title = "Update";
            var data = await _courseRepository.GetCourse((int)Id);
            courseModel = data.Data;
        }
    }

    private async Task CourseCreateOrUpdate()
    {
        try
        {
            if (Id != null)
            {
                var updateData = await _courseRepository.UpdateCourse((int)Id, courseModel);
                if (updateData.IsSuccess)
                {
                    {
                        await _jsRuntime.ToastrSuccess("Kayıt güncelleme başarılı");
                    }
                    _navigationManager.NavigateTo("courselist");
                }

            }
            else
            {
                var created = await _courseRepository.CreateCourse(courseModel);
                if (created.IsSuccess)
                {
                    {
                        await _jsRuntime.ToastrSuccess("Kayıt başarılı");
                    }
                    _navigationManager.NavigateTo("courselist");
                }
            }

        }
        catch (Exception ex)
        {
            await _jsRuntime.ToastrError(ex.Message.ToString());
        }
    }

    private async Task AddPicture(InputFileChangeEventArgs file)
    {
        var fileName = file.File;
        if (fileName!=null)
        {
            var data = await _fileUpload.UploadFile(fileName);
            var updateCourse = await _courseRepository.UpdateCourseImage((int)Id, data);
            if (updateCourse.IsSuccess)

                await _jsRuntime.ToastrSuccess(updateCourse.Message);
            else
                await _jsRuntime.ToastrError(updateCourse.Message);
        }
    }
}
